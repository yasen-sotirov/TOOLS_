"""
Разглеждаме пример на Python, който демонстрира полиморфизъм
чрез използването на наследяване и методи с общо име,
но различна функционалност. В този случай ще използваме животни
отново:
"""


# Основен клас Animal, от който наследяват други класове
class Animal:
    def make_sound(self):
        print("Животното прави някакъв звук.")


# Клас Dog, който наследява Animal
class Dog(Animal):
    def make_sound(self):
        print("Кучето лая.")


# Клас Cat, който наследява Animal
class Cat(Animal):
    def make_sound(self):
        print("Котката мяука.")


# Функция, която приема обект от клас Animal и извиква make_sound()
def animal_sound(animal):
    animal.make_sound()


# Създаване на обектите
animal = Animal()
dog = Dog()
cat = Cat()


# Извикване на функцията с различните обекти
animal_sound(animal)  # Извежда: "Животното прави някакъв звук."
animal_sound(dog)     # Извежда: "Кучето лая."
animal_sound(cat)     # Извежда: "Котката мяука."

"""
В този пример animal_sound(animal), animal_sound(dog) и 
animal_sound(cat) се отнасят към една и съща функция animal_sound,
но в зависимост от обекта, който бъде подаден като аргумент, 
се извиква различната реализация на make_sound(). 
Това демонстрира полиморфизъм, където обектите от различни класове
(в случая Dog и Cat) се поведени по различен начин при извикване
 на един и същ метод (make_sound()), който е дефиниран в 
 родителския клас Animal.
"""