"FASTAPI"     # https://fastapi.tiangolo.com/tutorial/first-steps/m



"""
https://fastapi-tiangolo-com.translate.goog/tutorial/query-params/?_x_tr_sl=auto&_x_tr_tl=bg&_x_tr_hl=bg

В FastAPI параметрите `Path()`, `Header()`, и `Query()` се използват за да декларирате и извлечете стойности от съответните части на HTTP заявката. Ето как те работят:

1. `Path()`: Този параметър се използва, за да извлечете стойности от пътната част на URL-а. Например, в URL-а "http://example.com/replies/42", `Path()` може да извлече стойността "42" от пътната част. Този параметър се използва, когато искате да извлечете информация от URL-а, като например идентификатор на ресурс.

Пример:
```python
from fastapi import Path

@reactions_router.put('/replies/{id_of_replies}', description='Add a reaction to a reply')
async def add_reaction_to_reply(
    id_of_replies: int = Path(..., description="ID of the reply to react to"),
):
    # Използва се id_of_replies, който е извлечен от пътя в URL-а.
```

2. `Header()`: Този параметър се използва, за да извлечете стойности от HTTP заглавките на заявката. Например, можете да извлечете токен за аутентикация от HTTP заглавката "Authorization". Този параметър се използва, когато информацията, която искате да извлечете, се намира в заглавките на HTTP заявката.

Пример:
```python
from fastapi import Header

@reactions_router.put('/replies', description='Add a reaction to a reply')
async def add_reaction_to_reply(
    x_token: str = Header(..., description="User's authentication token"),
):
    # Използва се x_token, който е извлечен от HTTP заглавката.
```

3. `Query()`: Този параметър се използва, за да извлечете стойности от Query параметрите на URL-а. Query параметрите се намират след знака "?" в URL-а и са обикновено използвани за предаване на опции и параметри към заявката.

Пример:
```python
from fastapi import Query

@reactions_router.put('/replies', description='Add a reaction to a reply')
async def add_reaction_to_reply(
    Upvote: int = Query(..., description="Upvote (1) or Downvote (-1)"),
):
    # Използва се Upvote, който е извлечен от Query параметъра в URL-а.
```

Тези параметри ви позволяват да извличате информация от различни части на HTTP заявката, 
като пътя, заглавките или Query параметрите и да я използвате във вашите FastAPI маршрути и функции.





ОПЦИЯ QUERY PARAMETERS sort, search
@app.get('/products')
def get_products(
    sort: str | None = None,
    search: str | None = None):
    result = products


ВРЪЩА STATUS_CODE  СЛЕД УСПЕШНА ЗАЯВКА
@app.post('/products', status_code=201)



existing_products = next((генератор), None)



СМЯНА НА ПОРТА
    uvicorn main:app --port 8080






===== КОДОВЕ =====
==================

При получена заявка сървърът връща статус кодове, които информират клиента за резултата от техните заявки. Състоят от чисо и текстово съобщение

1xx - Информационни:
    100 (Continue): Сървърът е готов да приеме заявката, но клиентът трябва да продължи с изпращането й.
    101 (Switching Protocols): Сървърът се съгласява да промени протоколите според заявката на клиента.

2xx  - Успешни:
    200 (OK): Заявката е успешно обработена.
    201 (Created): Заявката е създала нов ресурс.
    204 (No Content): Заявката е успешна, но няма тялото на отговора.

3xx - Пренасочване:
    301 (Moved Permanently): Ресурсът беше преместен перманентно на нов адрес.
    302 (Found) / 307 (Temporary Redirect): Ресурсът е временно преместен на друг адрес.
    304 (Not Modified): Кешираната версия на ресурса е валидна и не е необходима нова заявка.

4xx - Грешки от страна на клиента:
    400 (Bad Request): Заявката съдържа грешки и не може да бъде разбрана от сървъра.
    401 (Unauthorized): Потребителят не се е логнал. Не се Authentication-ал
    403 (Forbidden): Достъпът до ресурса е забранен за този потребител.
    404 (Not Found): Ресурсът не беше намерен на сървъра.

5xx - Грешки от страна на сървъра:
    500 (Internal Server Error): Възникна грешка на сървъра при обработката на заявката.
    502 (Bad Gateway): Сървърът, към който се опитвате да се свържете, не успя да изпълни заявката.
    503 (Service Unavailable): Сървърът не е достъпен, защото е временно извън строй.






===== ТЕОРИЯ =====
==================

REQUEST МЕТОДИ
    GET     - вземаме ресурс, при няколко повторения ще създаде нови ресурси
    POST    - за добавяне на ресурс
    PUT     - промяна на ресурс, ако го няма ще го създаде. Трябва да съдържа всичките характеристики на ресурса
    PATCH   - може да промени само част от характер. на ресурса
    DELETE  - трие ресурси
    OPTIONS -


    видове клиенти - браузър, конзола, приложение, postman, друг backend сървър
    HTTP - протокол по който си говорят сървър клиента, не не пренася само текст а всякакъв вид инфо
    порт - канал, точка на достъп към сървъра
    async def ...  - дава възможност ако предната заявка се бави, сървъра да обработва и други заявки



    Заглавки (Headers): HTTP заявките могат да съдържат различни заглавки, които предоставят допълнителна информация за заявката и нейните параметри. Заглавките могат да включват информация като тип на съдържанието, език, който се предпочита от клиента, и други.
съдържа допъл инф за начина по който искаме да получим информацията: език, устройство, от къде викаме
в каква форма искаме да получим съдържанието(формат на файла)

    Тяло на заявката (Request Body): Това е опционален елемент на заявката, който се използва при методи като POST или PUT, където клиентът може да изпраща данни към сървъра. Тялото на заявката съдържа тези данни.


    Параметри на заявката: Параметрите са допълнителни данни, които могат да бъдат включени в URL-а или в заявката и се използват за да зададете определени настройки или условия при изпращане на заявката.

Когато изпратите HTTP заявка към уеб сървър, тези елементи се комбинират, за да се определи какъв ресурс или услуга на сървъра искате да достъпите и как сървърът трябва да обработи заявката. Уеб сървърът след това отговаря с HTTP отговор, който също съдържа заглавки, тяло на отговора и други данни, свързани с резултата от заявката.

RESPONSE
status Code - дава инфо на база заявката какво се случва от тук нататък
обикновено се съдържа в три числа

 



ще използваме JSON формат за сереализиране и десеализиране на инфор. Сходен на речник
формат доста лесен за ползване в питон. удобен за  сереализиране и десеализиране


FRAMEWORK - дава рамката по която да стуктурираме кода
дава



Framework (рамка или платформа) като FastAPI е набор от инструменти, библиотеки и стандарти, които улесняват разработката на софтуерни приложения. Такива рамки предоставят структура и готови решения за общи задачи, които се срещат при разработката на уеб и софтуерни приложения. FastAPI е конкретна рамка за създаване на уеб API с Python.

Ето някои ключови характеристики на FastAPI:

    Скорост и производителност: FastAPI е известен с изключителната си скорост и производителност, което го прави подходящ за създаване на високопроизводителни уеб приложения и API.

    Автоматична документация: FastAPI генерира автоматична документация за вашите API с помощта на Swagger UI или ReDoc. Това прави документирането на вашето API много лесно.

    Валидация на данни: FastAPI предоставя интуитивен начин за валидация на входни данни, като използва типове данни и анотации, които са част от стандартната библиотека на Python.

    Асинхронна поддръжка: FastAPI поддържа асинхронно програмиране, което го прави идеален за обработка на конкурентни и I/O-интензивни заявки.

    Интеграция с различни бази данни: FastAPI може лесно да бъде интегриран с различни бази данни като SQLAlchemy, Tortoise-ORM и др.

    Сигурност: Предоставя множество инструменти за сигурност, включително автентикация, управление на разрешения и защита от атаки.

Пример за използване на FastAPI за създаване на просто уеб API в Python:

Позваме Fastapi заради библиотеката Pydanyic библиотеката, защ


root пътя е там където е main.py файла


CRUTD заявки - според правата на достъп може да се правят различни заявки
аутентикираш (аутиризираш) верифицираш











"""