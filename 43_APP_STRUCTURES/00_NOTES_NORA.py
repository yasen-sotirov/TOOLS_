"STRUCTURES"   # структури


"""
MVC ARCHITECTURE - подход за структуриране на кода, създава структура, организация и разделение 

    MODEL
    компонентът, отговарящ за управлението на данните и бизнес логиката в приложението. 
    частта от back end кода, която обработва заявките. 
    начина по който сме създали класа, какви функционалности, 
    как се ползват и взаимодействат моделите.
    дава структура на информацията с която работим
        
        Съхранение на данни: Моделът съдържа данните, които приложението използва. 
        
        Бизнес логика: как се обработват и манипулират данните, валидация, изчисления и др.
        
        Абстракция: предоставя абстракция на данните, скрива детайлите за съхранението и 
        достъпа до данните от външния свят. Това улеснява промени във вътрешната реализация на данните, 
        без да се нарушава външния интерфейс на модела.
        
        Независимост от потребителския интерфейс: позволява лесна преизползваемост и тестваемост на бизнес логиката
        
        Интерфейс за достъп: Моделът предоставя интерфейс за достъп и манипулация на данните. 
        Този интерфейс обикновено включва методи за четене, запис и обновление на данните.
        
        
    view        - това което показваме на клиента - уеб страница, апп, приложение. Чрез JSON, HTML 
    controller  - обработва заявките от и към клиента. прави връзката между двете





ДЕЛИ КОДА НА ТРИ ЧАСТИ:
    routers     - частта от кода, която обработва рикуеста
    services    - 
    data access - 



N-Tire Architecture

tier    - физическо разделение на програмата на различни сървъри
отделен физически процес - на различни машини, работещи самостоятелно 
separation of concense - разделение на 



Presentation tier   - HTTP server, HTML response, графичен интерфейс (GUI)
                    мобиле апп, Postman, за визуализиране на инфото

Logic tire  - приложение на FastAPI, прави логиката. Тук са леърите:
 приема заявката, 
    1. routes - application layer- framework-specific HTTP
    2. Service layer    - логиката какви данни искаме да вземем от БД
    3. Data access      - дава АПИ


Data tier   - 



layer   - абстрактно разделение






"""


