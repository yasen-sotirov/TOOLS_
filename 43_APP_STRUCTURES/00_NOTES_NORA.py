"STRUCTURES"   # структури

# https://dotnettutorials.net/what-is-the-difference-between-layers-and-tiers/
"""

Клиента изпраща заявка към контролера (http request)

Контролера се обръща към модела за информацията искана в заявката на клиента

Моделът комуникира с БД и обработва търсената информация: валидира, манипулира ъпдеитва 
Обработената информация модулът изпраща към контролера

контролера изпраща резултата към View (презентацията), 

презентацията обработва заявката в презентационен вид (html, json) и я връща на контролера

контролера изпраща готовата презентация на клиента

    Model и  View не си комуникират директно
    Model работи само с БД
    View работи само с презентациите
    Controller казва на едното и на другото какво да правят

MVC (3 tier) ARCHITECTURE - подход за структуриране на кода, създава структура, организация и разделение 

    MODEL
    компонентът, отговарящ за управлението на данните и бизнес логиката в приложението. 
    частта от back end кода, която обработва заявките. 
    начина по който сме създали класа, какви функционалности, 
    как се ползват и взаимодействат моделите.
    дава структура на информацията с която работим
        
        Съхранение на данни: Моделът съдържа данните, които приложението използва. 
        
        Бизнес логика: как се обработват и манипулират данните, валидация, изчисления и др.
        
        Абстракция: предоставя абстракция на данните, скрива детайлите за съхранението и 
        достъпа до данните от външния свят. Това улеснява промени във вътрешната реализация на данните, 
        без да се нарушава външния интерфейс на модела.
        
        Независимост от потребителския интерфейс: позволява лесна преизползваемост и тестваемост на бизнес логиката
        
        Интерфейс за достъп: Моделът предоставя интерфейс за достъп и манипулация на данните. 
        Този интерфейс обикновено включва методи за четене, запис и обновление на данните.
        
        
    VIEW (PRESENTATION)
    това което показваме на клиента - уеб страница, апп, приложение. Чрез JSON, HTML 
    
    
    CONTROLLER (Logic tire)  - обработва заявките от и към клиента. 
    прави връзката между двете. прави логиката. Тук са леърите:



Архитектурният шаблон MVC (Model-View-Controller) е често използван за разделяне на приложението 
на три основни компонента: модел (Model), изглед (View) и контролер (Controller). 
В рамките на MVC архитектурата, слоевете, които вие споменахте - routes (маршрути), 
services (услуги) и data access (достъп до данни), играят следните роли:


1. **Маршрути (Routes):**
   - Маршрутите са част от контролера (Controller) в архитектурата MVC.
   - Те се използват за дефиниране на начина, по който HTTP заявките се обработват и пренасочват 
     към съответните контролери за обработка.
   - Маршрутите се грижат за маркирането на URL-пътищата и свързването им с определени контролери 
     и действия (методи) в тези контролери.
   - В много съвременни уеб фреймуърки, като FastAPI или Django, маршрутирането става посредством 
     дефиниране на URL маршрути и свързване на тези маршрути със съответните функции 
     или методи за обработка на заявките.


2. **Услуги (Services):**
   - Услугите са част от модела (Model) в архитектурата MVC.
   - Те представляват слой, който съдържа бизнес логиката и използва информацията и данните от 
     модела, за да извършва операции като валидация, изчисления и манипулации с данни.
   - Услугите обикновено се изолират от директен достъп до базата данни и предоставят интерфейс, 
     който е по-лесен за използване от контролерите.
   - Този слой е отговорен за бизнес логиката и може да се използва от различни контролери, 
     които обработват различни HTTP заявки.


3. **Достъп до данни (Data Access):**
   - Слойът за достъп до данни също е част от модела (Model) в архитектурата MVC.
   - Този слой се използва за връзка със съхранени данни, като бази данни, файлове и други 
     източници на данни.
   - Той предоставя функционалност за извличане, добавяне, обновяване и изтриване на данни.
   - Обикновено се използва ORM (Object-Relational Mapping) или директни заявки към базата 
     данни за взаимодействие с данните.
   - Този слой се грижи за изолиране на бизнес логиката от специфичната реализация на данните.



Взаимодействието между тези слоеве помага за разделянето на отговорностите и подобрява 
четимостта и поддръжката на кода. Маршрутите обработват HTTP заявките и пренасочват 
тяхната обработка към контролерите, които се свързват със съответни услуги за бизнес 
логика, а тези услуги от своя страна използват слоя за достъп до данни, за да извличат 
или обновяват данни в съответните източници.





N-Tire Architecture

tier    - физическо разделение на програмата на различни сървъри
отделен физически процес - на различни машини, работещи самостоятелно 
separation of concense - разделение на 



Presentation tier   - HTTP server, HTML response, графичен интерфейс (GUI)
                    мобиле апп, Postman, за визуализиране на инфото




Data tier   - 



layer   - абстрактно разделение






"""


