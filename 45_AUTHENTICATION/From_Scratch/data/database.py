from mariadb import connect
from mariadb.connections import Connection


def _get_connection() -> Connection:
    return connect(
        user='root',
        password='Tur6ia',
        host='localhost',
        port=3306,
        database='ordering_api_db_v2'
    )



def read_query(sql: str, sql_params=()):
    with _get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(sql, sql_params)

        return list(cursor)


"ВМЪКВА ДАННИ ЧРЕЗ SQL ЗАЯВКА"
def insert_query(sql:str, sql_params=()):
    # взема връзката
    with _get_connection() as conn:
        # Курсорът (cursor) в контекста на работата с бази данни е важен инструмент, който позволява на програмата да изпълнява SQL заявки и да работи с резултатите от тях. Курсорът служи за навигация в резултатното множество от изпълнените заявки и позволява на програмата да извлича, модифицира и взаимодейства с данните в базата данни. Вотре е няколко важни аспекта и функции, свързани с курсорите:
        #
        # 1. **Създаване на курсор**: Първата стъпка за използване на курсор в базата данни е да създадете курсор за конкретната връзка към базата данни. В общи линии, след като имате връзка към базата данни (чрез съединение), можете да създадете курсор, който да използвате за изпълнение на заявки.
        #
        # 2. **Изпълнение на заявки**: С курсора можете да изпълнявате SQL заявки, като например SELECT, INSERT, UPDATE, DELETE и други. Този процес става чрез метода `execute()` на курсора, където можете да подадете SQL заявката като низ и (при необходимост) параметри за заявката.
        #
        # 3. **Получаване на резултати**: Ако изпълнената заявка връща резултати, курсорът държи тези резултати, и може да бъдат извлечени чрез различни методи като `fetchone()`, `fetchall()`, `fetchmany()` и други, в зависимост от това какво точно искате да извлечете.
        #
        # 4. **Навигация в резултатите**: Курсорите позволяват на програмата да навигира в резултатното множество, извличайки редове и колони по желание. Можете да преместите курсора към следващ ред, предишен ред или конкретен ред.
        #
        # 5. **Транзакции и управление на промените**: Курсорите също така се използват за управление на транзакции в базата данни, като например за стартиране на нова транзакция, комитиране на промените или отмяна на транзакцията.
        #
        # 6. **Затваряне на курсора**: Ефективното управление на ресурсите е важно. След като сте приключили с курсора, трябва да го затворите с помощта на метода `close()`. Това освобождава ресурсите и гарантира, че няма да бъдат използвани повече.
        #
        # Важно е да се подчертае, че курсорите трябва да се използват внимателно, за да се избегнат проблеми като утечки на памет или блокиране на ресурси в базата данни. Те са полезен инструмент за манипулиране на данни и изпълнение на заявки, но трябва да бъдат правилно управлявани в рамките на връзката с базата данни.
        cursor = conn.cursor()
        cursor.execute(sql, sql_params)
        conn.commit()

        return cursor.lastrowid



def update_query(sql:str, sql_prams=()):
    with _get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(sql, sql_prams)
        conn.commit()

    return cursor.rowcount

























