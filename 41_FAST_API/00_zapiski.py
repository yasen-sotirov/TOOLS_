"""
видове кличенти - браузър, конзола, приложение, postman, друг backend сървър



сървъра получава заявка от клиента

HTTP - протокол по който си говорят сървър клиента, не не пренася само текст а всякакъв вид инфо

порт - канал, точка на достъп към сървъра

заявка / request - елементи на една заявка:
говорим основно за ресурси

Един HTTP (Hypertext Transfer Protocol) заявка (request) към уеб сървъра се състои от няколко основни елемента:

    Метод (Method): Това е HTTP методът, който указва какво искате да направите с ресурса на сървъра. Най-често използваните методи са GET (за извличане на информация), POST (за изпращане на данни към сървъра), PUT (за актуализация на ресурс), и DELETE (за изтриване на ресурс).

    verb localhost:80/product/id...
    URL (Uniform Resource Locator): URL адресът, който указва точното място на ресурса, който искате да достъпите. Той включва протокол (например, "http://" или "https://"), домейн (име на сървъра), порт (ако е необходим), път (URI), и заявка (query string), ако такава има.
ще ползваме локъл хост
на един урл може да се случат две неща спрямо глагола който подаваме създаване или вземане
МОже да се разглежда като карта на сървъра, указваща от къде какво искаме да вземем


Path параметри - допъл парам указващи какво точно искаме да вземем от този
Quiry параметри - може да се ползват за указване на доъплнителни параметри

REQUEST МЕТОДИ
GET     - вземаме ресурс, при няколко повторения ще създаде нови ресурси
POST    - за добавяне на ресурс
PUT     - промяна на ресурс, ако го няма ще го създаде. Трябва да съдържа всичките характеристики на ресурса
PATCH   - може да промени само част от характер. на ресурса
DELETE  - трие ресурси
OPTIONS -

    Заглавки (Headers): HTTP заявките могат да съдържат различни заглавки, които предоставят допълнителна информация за заявката и нейните параметри. Заглавките могат да включват информация като тип на съдържанието, език, който се предпочита от клиента, и други.
съдържа допъл инф за начина по който искаме да получим информацията: език, устройство, от къде викаме
в каква форма искаме да получим съдържанието(формат на файла)

    Тяло на заявката (Request Body): Това е опционален елемент на заявката, който се използва при методи като POST или PUT, където клиентът може да изпраща данни към сървъра. Тялото на заявката съдържа тези данни.


    Параметри на заявката: Параметрите са допълнителни данни, които могат да бъдат включени в URL-а или в заявката и се използват за да зададете определени настройки или условия при изпращане на заявката.

Когато изпратите HTTP заявка към уеб сървър, тези елементи се комбинират, за да се определи какъв ресурс или услуга на сървъра искате да достъпите и как сървърът трябва да обработи заявката. Уеб сървърът след това отговаря с HTTP отговор, който също съдържа заглавки, тяло на отговора и други данни, свързани с резултата от заявката.

RESPONSE
status Code - дава инфо на база заявката какво се случва от тук нататък
обикновено се съдържа в три числа

видове статус код:
1ХХ - стартиращи с 1: informational
2ХХ - success сървъра казва че може да изпълни заявката ни
3ХХ - започват с 3; ресурсът е бил преместен: Redirect
4ХХ - грешно подадена заявка: Client Error. Може ресурса да го няма, може юзъра не позволено да ползва ресурса, може да е нужна аутентикация
5ХХ - грешката идва от сървъра, клиента не може да нарави нищо по въпроса


API - това което ни е разписано че може да достъпим отвън
договора между нас и клиента че той ще получи ресурса независимо какъв е клиента и от какво устросвто идва
договора казва какво точно може да получи клиента

какво значи интерфейс: графичната среда в която работим
за бекенд - всеки един поинт който може да достъпи отвън
нещо като публичните методи дотъпни отвън на класа
това което искаме да може да достъпим отвън за юзер:



ще използваме JSON формат за сереализиране и десеализиране на инфор. Сходен на речник
формат доста лесен за ползване в питон. удобен за  сереализиране и десеализиране


FRAMEWORK - дава рамката по която да стуктурираме кода
дава



Framework (рамка или платформа) като FastAPI е набор от инструменти, библиотеки и стандарти, които улесняват разработката на софтуерни приложения. Такива рамки предоставят структура и готови решения за общи задачи, които се срещат при разработката на уеб и софтуерни приложения. FastAPI е конкретна рамка за създаване на уеб API с Python.

Ето някои ключови характеристики на FastAPI:

    Скорост и производителност: FastAPI е известен с изключителната си скорост и производителност, което го прави подходящ за създаване на високопроизводителни уеб приложения и API.

    Автоматична документация: FastAPI генерира автоматична документация за вашите API с помощта на Swagger UI или ReDoc. Това прави документирането на вашето API много лесно.

    Валидация на данни: FastAPI предоставя интуитивен начин за валидация на входни данни, като използва типове данни и анотации, които са част от стандартната библиотека на Python.

    Асинхронна поддръжка: FastAPI поддържа асинхронно програмиране, което го прави идеален за обработка на конкурентни и I/O-интензивни заявки.

    Интеграция с различни бази данни: FastAPI може лесно да бъде интегриран с различни бази данни като SQLAlchemy, Tortoise-ORM и др.

    Сигурност: Предоставя множество инструменти за сигурност, включително автентикация, управление на разрешения и защита от атаки.

Пример за използване на FastAPI за създаване на просто уеб API в Python:

Позваме Fastapi заради библиотеката Pydanyic библиотеката, защ


root пътя е там където е main.py файла








"""